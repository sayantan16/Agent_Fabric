{% extends "base.html" %}
{% block title %}Chat - Agentic Fabric{% endblock %}

{% block content %}
<!-- Remove the conflicting max-w-7xl wrapper from base.html for this page -->
<div class="flex flex-col" style="height: calc(100vh - 64px);">
    <!-- Header -->
    <div class="bg-white border-b px-6 py-3 flex-shrink-0">
        <h1 class="text-xl font-semibold text-gray-800">AI Assistant</h1>
        <p class="text-xs text-gray-600">Multi-agent orchestration powered by Claude and GPT-4</p>
    </div>
    
    <!-- Main Content Area -->
    <div class="flex flex-1 overflow-hidden">
        <!-- Chat Section -->
        <div class="flex-1 flex flex-col overflow-hidden">
            <!-- Welcome Message (collapsible) -->
            <div id="welcome-message" class="bg-gradient-to-r from-blue-50 to-indigo-50 border-b p-4 transition-all duration-300 flex-shrink-0">
                <button onclick="toggleWelcome()" class="float-right text-gray-400 hover:text-gray-600">✕</button>
                <h2 class="text-base font-semibold mb-2">Welcome to Agentic Fabric!</h2>
                <p class="text-sm text-gray-700 mb-2">I can help you with complex tasks using intelligent AI agents:</p>
                <ul class="text-xs space-y-1 text-gray-600">
                    <li>• <strong>Document Analysis:</strong> PDF summaries, data extraction</li>
                    <li>• <strong>Data Processing:</strong> CSV analysis, statistical reports</li>
                    <li>• <strong>Content Extraction:</strong> Emails, URLs, phone numbers</li>
                    <li>• <strong>Multi-step Workflows:</strong> Complex orchestrated tasks</li>
                </ul>
                <div class="mt-3 flex flex-wrap gap-2">
                    <button onclick="setExample('Extract all email addresses from this text')" 
                            class="px-2 py-1 bg-white rounded text-xs hover:bg-gray-50 border">
                        "Extract all email addresses from this text"
                    </button>
                    <button onclick="setExample('Analyze the uploaded CSV and create a summary')" 
                            class="px-2 py-1 bg-white rounded text-xs hover:bg-gray-50 border">
                        "Analyze the uploaded CSV and create a summary"
                    </button>
                </div>
            </div>

            <!-- Chat Messages -->
            <div id="chat-messages" class="flex-1 overflow-y-auto p-4">
                <!-- Messages will appear here -->
            </div>

            <!-- Input Area -->
            <div class="border-t bg-white p-3 flex-shrink-0">
                <div class="flex gap-2 max-w-4xl mx-auto">
                    <button class="p-2 text-gray-500 hover:text-gray-700">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"/>
                        </svg>
                    </button>
                    <input type="text" id="message-input" 
                           placeholder="Ask me anything... (Ctrl+Enter to send)"
                           class="flex-1 px-3 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <button onclick="sendMessage()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm">
                        Send
                    </button>
                </div>
                <div class="mt-2 flex gap-2 max-w-4xl mx-auto">
                    <span class="text-xs text-gray-500">Quick actions:</span>
                    <button onclick="setExample('Extract Emails')" class="text-xs px-2 py-1 bg-gray-100 rounded hover:bg-gray-200">Extract Emails</button>
                    <button onclick="setExample('Statistical Analysis')" class="text-xs px-2 py-1 bg-gray-100 rounded hover:bg-gray-200">Statistical Analysis</button>
                </div>
            </div>
        </div>

        <!-- Right Sidebar -->
        <div class="w-72 bg-gray-50 border-l flex flex-col overflow-hidden">
            <!-- Workflow Status -->
            <div class="p-3 border-b bg-white">
                <h3 class="font-semibold text-sm text-gray-800">Workflow Status</h3>
                <p class="text-xs text-gray-600 mt-1">Real-time execution monitoring</p>
            </div>

            <!-- System Status -->
            <div class="p-3 border-b bg-white">
                <h3 class="font-semibold text-sm text-gray-800 mb-2">System Status</h3>
                <div class="space-y-1 text-xs">
                    <div class="flex justify-between">
                        <span>Backend</span>
                        <span id="backend-status" class="text-green-600">Connected</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Agents</span>
                        <span id="agent-count">4</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Tools</span>
                        <span id="tool-count">11</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Health Score</span>
                        <span id="health-score">100%</span>
                    </div>
                </div>
            </div>

            <!-- Quick Access -->
            <div class="flex-1 p-3 overflow-y-auto">
                <h3 class="font-semibold text-sm text-gray-800 mb-2">Quick Access</h3>
                <div class="space-y-1">
                    <a href="/registry" class="block p-2 text-xs text-gray-700 hover:bg-white rounded">Browse Registry</a>
                    <a href="/workflows" class="block p-2 text-xs text-gray-700 hover:bg-white rounded">Workflow History</a>
                    <a href="/dependencies" class="block p-2 text-xs text-gray-700 hover:bg-white rounded">Dependencies</a>
                    <a href="/help" class="block p-2 text-xs text-gray-700 hover:bg-white rounded">Help & Examples</a>
                    <button onclick="refreshStatus()" class="block w-full text-left p-2 text-xs text-gray-700 hover:bg-white rounded">Refresh Status</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let welcomeHidden = false;

function toggleWelcome() {
    const welcome = document.getElementById('welcome-message');
    if (welcome) {
        welcome.style.display = 'none';
        welcomeHidden = true;
    }
}

function setExample(text) {
    document.getElementById('message-input').value = text;
}

async function sendMessage() {
    const input = document.getElementById('message-input');
    const message = input.value.trim();
    
    if (!message) return;
    
    // Hide welcome on first message
    if (!welcomeHidden) {
        toggleWelcome();
    }
    
    // Add user message
    addMessage(message, 'user');
    input.value = '';
    
    // Send to backend
    try {
        const response = await fetch('/api/chat/message', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({message: message})
        });
        
        const data = await response.json();
        if (data.response) {
            addMessage(data.response.message || 'Processing...', 'assistant');
        }
    } catch (error) {
        addMessage('Error: Could not process request', 'assistant');
    }
}

function addMessage(text, type) {
    const container = document.getElementById('chat-messages');
    const msgDiv = document.createElement('div');
    msgDiv.className = `mb-3 ${type === 'user' ? 'text-right' : 'text-left'}`;
    msgDiv.innerHTML = `
        <div class="inline-block max-w-lg px-4 py-2 rounded-lg ${
            type === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-800'
        }">
            ${text}
        </div>
    `;
    container.appendChild(msgDiv);
    container.scrollTop = container.scrollHeight;
}

// Load system status - ENHANCED VERSION
async function refreshStatus() {
    try {
        const response = await fetch('/api/registry/stats');
        const data = await response.json();
        
        if (data.available) {
            document.getElementById('backend-status').textContent = 'Connected';
            document.getElementById('backend-status').className = 'text-green-600';
            document.getElementById('agent-count').textContent = data.statistics.total_agents || 4;
            document.getElementById('tool-count').textContent = data.statistics.total_tools || 11;
            document.getElementById('health-score').textContent = (data.summary.health_score || 100) + '%';
        } else {
            document.getElementById('backend-status').textContent = 'Disconnected';
            document.getElementById('backend-status').className = 'text-red-600';
        }
    } catch (error) {
        console.error('Status refresh error:', error);
        document.getElementById('backend-status').textContent = 'Disconnected';
        document.getElementById('backend-status').className = 'text-red-600';
    }
}

// Initialize status on load
document.addEventListener('DOMContentLoaded', refreshStatus);

// Keyboard shortcut
document.addEventListener('keydown', function(e) {
    if (e.ctrlKey && e.key === 'Enter') {
        sendMessage();
    }
});
</script>
{% endblock %}