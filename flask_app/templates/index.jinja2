{% extends "base.html" %}
{% block title %}Chat - Agentic Fabric{% endblock %}

{% block content %}
<!-- Full screen layout with sidebar -->
<div class="flex" style="height: calc(100vh - 64px);">
    <!-- Sidebar -->
    {% include 'components/sidebar.html' %}
    
    <!-- Main Content Area with Workflow Panel -->
    <div class="flex-1 flex overflow-hidden">
        <!-- Chat Container (Left Side) -->
        <div class="flex-1 flex flex-col overflow-hidden chat-main-area">
            {% include 'components/chat-container.html' %}
        </div>
        
        <!-- Right Sidebar - Workflow Panel -->
        <div class="workflow-sidebar">
            <!-- Workflow Status Panel -->
            <div class="sidebar-panel flex-1">
                <div class="sidebar-header">
                    <h6>
                        <svg fill="currentColor" viewBox="0 0 20 20">
                            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                        </svg>
                        Workflow Status
                    </h6>
                </div>
                <div class="sidebar-body">
                    <div id="workflow-panel">
                        <div class="sidebar-empty-state">
                            <svg fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            <p>Send a message to see workflow execution</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Pipeline Analytics Panel -->
            <div class="sidebar-panel fixed-height">
                <div class="sidebar-header">
                    <h6>
                        <svg fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"/>
                        </svg>
                        Pipeline Analytics
                    </h6>
                </div>
                <div class="sidebar-body">
                    <div id="analytics-panel">
                        <div class="sidebar-empty-state">
                            <p>Analytics will appear after pipeline execution</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Workflow Visualization Modal (Hidden by default) -->
<div id="workflow-visualization" class="hidden">
    {% include 'components/workflow-visualization.html' %}
</div>

<script>
// Simplified workflow functions (keeping your existing ones)
window.showWorkflowVisualization = function(workflowData) {
    console.log('Workflow visualization requested:', workflowData);
};

window.hideWorkflowVisualization = function() {
    console.log('Hide workflow visualization');
};

// Initialize on DOM load
document.addEventListener('DOMContentLoaded', function() {
    console.log('ðŸš€ Agentic Fabric Chat Interface Loaded');
    
    // Setup keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K to focus message input
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            const messageInput = document.querySelector('textarea[x-model="currentMessage"]');
            if (messageInput) {
                messageInput.focus();
            }
        }
    });

// ADD these functions after your existing script
window.updateWorkflowPanel = function(workflowData) {
    const panel = document.getElementById('workflow-panel');
    if (!panel || !workflowData) return;
    
    // Create workflow visualization
    const steps = workflowData.workflow?.steps || [];
    const stepsCompleted = workflowData.workflow?.steps_completed || steps.length;
    
    let html = `
        <div class="space-y-3">
            <div class="flex items-center justify-between mb-4">
                <span class="text-sm font-medium text-gray-700">Pipeline Execution</span>
                <span class="text-xs px-2 py-1 rounded-full ${getStatusColor(workflowData.status)}">
                    ${workflowData.status}
                </span>
            </div>
    `;
    
    if (steps.length > 0) {
        steps.forEach((step, index) => {
            const isCompleted = index < stepsCompleted;
            const isActive = index === stepsCompleted && workflowData.status === 'processing';
            const stepClass = isCompleted ? 'completed' : (isActive ? 'active' : 'pending');
            
            html += `
                <div class="workflow-step ${stepClass}">
                    <div class="step-number">${index + 1}</div>
                    <div class="flex-1">
                        <div class="text-sm font-medium">${step}</div>
                    </div>
                </div>
            `;
        });
        
        html += `
            <div class="mt-4 pt-3 border-t border-gray-200 text-xs text-gray-600 space-y-1">
                <div>Progress: ${stepsCompleted}/${steps.length} steps</div>
                <div>Time: ${(workflowData.execution_time || 0).toFixed(1)}s</div>
            </div>
        `;
    }
    
    html += '</div>';
    panel.innerHTML = html;
};

window.updateAnalyticsPanel = function(analytics) {
    const panel = document.getElementById('analytics-panel');
    if (!panel || !analytics) return;
    
    const html = `
        <div class="analytics-stats space-y-2">
            <div class="stat-item flex justify-between">
                <span class="text-xs text-gray-600">Total Pipelines:</span>
                <span class="text-xs font-medium">${analytics.total_pipelines || 0}</span>
            </div>
            <div class="stat-item flex justify-between">
                <span class="text-xs text-gray-600">Success Rate:</span>
                <span class="text-xs font-medium">${((analytics.success_rate || 0) * 100).toFixed(1)}%</span>
            </div>
            <div class="stat-item flex justify-between">
                <span class="text-xs text-gray-600">Avg Steps:</span>
                <span class="text-xs font-medium">${(analytics.average_steps || 0).toFixed(1)}</span>
            </div>
            <div class="stat-item flex justify-between">
                <span class="text-xs text-gray-600">Avg Time:</span>
                <span class="text-xs font-medium">${(analytics.average_execution_time || 0).toFixed(1)}s</span>
            </div>
        </div>
    `;
    panel.innerHTML = html;
};

function getStatusColor(status) {
    switch(status) {
        case 'success': return 'bg-green-100 text-green-800';
        case 'processing': return 'bg-blue-100 text-blue-800';
        case 'error': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
    }
}

// Load analytics on page load
document.addEventListener('DOMContentLoaded', function() {
    fetch('/api/pipeline/analytics')
        .then(response => response.json())
        .then(data => window.updateAnalyticsPanel(data))
        .catch(error => console.log('Analytics not available:', error));
});

</script>

<style>
/* Enhanced chat message styles */
.chat-message {
    animation: fadeInUp 0.3s ease-out;
}

@keyframes fadeInUp {
    from { 
        opacity: 0; 
        transform: translateY(10px); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0); 
    }
}

/* Better button states */
button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

button:not(:disabled):hover {
    transform: translateY(-1px);
    transition: transform 0.1s ease;
}
</style>
{% endblock %}